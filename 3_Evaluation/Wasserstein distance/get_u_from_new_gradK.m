% Use estimated potential to genreate solution u


%% Load parameters
est = infer_output.grad_K.est;
xgrid=  sysInfo.xgrid;
T = sysInfo.T;
L = sysInfo.L;
dt = sysInfo.dt;
dx = sysInfo.dx;
N = sysInfo.N;
d = sysInfo.d;

old_initial = sysInfo.Initial;
%% Make a function handle of the generated solution

if isa(est, 'double')
    temp = fit(xgrid', est ,'smoothingspline');
    est_func_handle = @(x) reshape(temp(x), size(x));
else
    est_func_handle = @(x) est(x);
end

U_infer = U;

%% Save old parameters
P = sysInfo.P;
sysInfo = settings_DEs(1);
saveON = 0;  plotON = 0; savefigON = 1; progressON = 0;    % 1 for x.fig, 2 for .png
U = Ensamble_generate_data(sysInfo,dataDIR,datafigDIR,saveON,plotON,savefigON,progressON);
U_old = U;


%% Load new parameters
sysInfo.P = est_func_handle;
sysInfo.nlfn = 'new';

%% generate new solution. with same initial value
saveON = 0;  plotON = 0; savefigON = 1; progressON = 0;    % 1 for x.fig, 2 for .png
U = Ensamble_generate_data(sysInfo,dataDIR,datafigDIR,saveON,plotON,savefigON,progressON);
U_new = U;

%% generate new solution, with different initial value
sysInfo.Initial = new_initial;
[sysInfo.U0, ~] = set_Initial(L, dx, N, new_initial, d);



saveON = 0;  plotON = 0; savefigON = 1; progressON = 0;    % 1 for x.fig, 2 for .png
U = Ensamble_generate_data(sysInfo,dataDIR,datafigDIR,saveON,plotON,savefigON,progressON);
U_new_diff_ini = U;

%% compare with the true solution with the (different initial value)
sysInfo = settings_DEs(1);
sysInfo.Initial = new_initial;
[sysInfo.U0, ~] = set_Initial(L, dx, N, new_initial, d);


saveON = 0;  plotON = 0; savefigON = 1;     % 1 for x.fig, 2 for .png
U = Ensamble_generate_data(sysInfo,dataDIR,datafigDIR,saveON,plotON,savefigON,progressON);
U_old_diff_ini = U;

U = U_infer;

err_old = sqrt(trapz(trapz((U_old - U_new).^2))*dx*dt);
err_diff_ini = sqrt(trapz(trapz((U_old_diff_ini - U_new_diff_ini).^2))*dx*dt);

%% ploting
if diff_ini_plotON
    figure;
    [xx,yy] = meshgrid(0:dt:T, -L:dx:L);
    subplot(221);surf(xx,yy,U_old);shading flat;view(0,90);xlabel('time t');ylabel('space x');
    title(['Old initial = ', old_initial,', True'], 'Interpreter','none')
    subplot(222);surf(xx,yy,U_new);shading flat;view(0,90);xlabel('time t');ylabel('space x');
    title(['Old initial = ', old_initial, ', Est, err = ', num2str(err_old)], 'Interpreter','none')
    subplot(223);surf(xx,yy,U_old_diff_ini);shading flat;view(0,90);xlabel('time t');ylabel('space x');
    title(['New initial = ', new_initial, ', True'], 'Interpreter','none')
    subplot(224);surf(xx,yy,U_new_diff_ini);shading flat;view(0,90);xlabel('time t');ylabel('space x');
    title(['New initial = ', new_initial, ', Est, err = ', num2str(err_diff_ini)], 'Interpreter','none')
    
    ttl1 = 'Use approximated potential to generate solution U, with old initial and new initial';
    ttl2 = 'Also compute the L^2([-L, L]\times[0,T]) error';
    sgtitle({ttl1, ttl2})
    
    %% Steady state
    
    figure;
    err_old_steady_state = sqrt(trapz((U_old(:,end) - U_new(:,end)).^2)*dx);
    err_new_steady_state = sqrt(trapz((U_old_diff_ini(:,end) - U_new_diff_ini(:,end)).^2)*dx);
    subplot(131);plot(xgrid, U_old(:,end));hold on;plot(xgrid, U_new(:,end));legend('true','approx')
    title(['Old initial = ', old_initial, ', err = ',num2str(err_old_steady_state)], 'Interpreter','none');
    
    subplot(132);plot(xgrid, U_old_diff_ini(:,end));hold on;plot(xgrid, U_new_diff_ini(:,end));legend('true','approx')
    title(['New initial = ', new_initial, ', err = ',num2str(err_new_steady_state)], 'Interpreter','none');
    
    
    subplot(133);plot(xgrid, P(xgrid));hold on;plot(xgrid, est_func_handle(xgrid));legend('true','approx');
    title('\nabla K approximation result')
    
    
    sgtitle({'Steady state of solutions U generated by true and estimated potential with old and new initials' , 'and L^2([-L, L]) error of steday state '})
    
    fig = gcf;
    fig.Units = 'inches';
    fig.Position = [2 2   17 9];
end
